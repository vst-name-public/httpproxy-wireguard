name: Build, Test, and Push Docker Image

on:
  push:
    branches:
    - main

env:
  REGISTRY_ORG: vst0name
  REGISTRY_REPO: httpproxy-wireguard
  VERSION: latest # SemVer placeholder

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: "arm64, amd64"

    # Build
    - name: Set DATETIME
      id: datetime
      run: echo "DATETIME=$(date --rfc-3339=seconds)" >> $GITHUB_ENV

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_ORG }}/${{ env.REGISTRY_REPO }}
        flavor: |
          latest=auto
        tags: |
          type=raw,value=${{ env.VERSION }}
          type=raw,value=${{ env.GITHUB_REF_NAME }}
        labels: |
          "org.opencontainers.image.title=HTTPProxy-Wireguard"
          "org.opencontainers.image.description=A minimal WireGuard HTTP/s proxy with TinyHTTP"
          "org.opencontainers.image.authors=org - linuxserver, https://github.com/vst-name"
          "org.opencontainers.image.source=https://github.com/vst-name/httpproxy-wireguard"
          "org.opencontainers.image.documentation=https://github.com/vst-name/httpproxy-wireguard"
          "org.opencontainers.image.licenses=GPL-3.0"
          "org.opencontainers.image.revision=${{ env.GITHUB_SHA }}"
          "org.opencontainers.image.created=${{ env.DATETIME }}"

    - name: Build and export to Docker
      uses: docker/build-push-action@v6
      with:
        load: true
        tags: ${{ env.REGISTRY_ORG }}/${{ env.REGISTRY_REPO }}:${{ env.VERSION }}
        cache-to: type=gha,mode=max

    # Test
    - name: Create peer.conf from secret
      run: |
        mkdir -p ./conf.d/wireguard/wg_confs
        echo "${{ secrets.PEER }}" > ./conf.d/wireguard/wg_confs/peer.conf
    - name: Test the image
      id: test
      run: |
        docker image ls
        echo "${{ env.REGISTRY_REPO }}/:${{ env.VERSION }}"
        TIMEOUT=10
        ELAPSED_TIME=0
        docker run -d \
        --name ${{ env.REGISTRY_REPO }}-${{ env.VERSION }} \
        --hostname wireguard \
        --env PEERS=false \
        --env PUID=1000 \
        --env PGID=1000 \
        --cap-add NET_ADMIN \
        --cap-add SYS_MODULE \
        --volume ./conf.d/tinyproxy:/tinyproxy \
        --volume ./conf.d/wireguard:/config \
        --volume /lib/modules:/lib/modules \
        --publish 8888:8888/tcp \
        --sysctl net.ipv4.conf.all.src_valid_mark=1 \
        ${{ env.REGISTRY_ORG }}/${{ env.REGISTRY_REPO }}:${{ env.VERSION }}

        if [ $? == 0 ]; then
            while ! curl --proxy http://localhost:8888 https://google.com > /dev/null; do
                if [ $ELAPSED_TIME -ge $TIMEOUT ]; then
                    echo "Test timed out after $TIMEOUT seconds"
                    exit 1
                fi
                echo "Waiting for container to start..."
                sleep 1
                ELAPSED_TIME=$((ELAPSED_TIME + WAIT_TIME))
            done
            
        else
            echo "Test failed"
            exit 1
        fi

    - name: Build and export to Docker Hub
      uses: docker/build-push-action@v6
      with:
        push: ${{ github.event_name != 'pull_request' }}
        platforms: linux/amd64,linux/arm64
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

    - name: Docker Hub Description
      uses: peter-evans/dockerhub-description@v4
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        short-description: "A minimal WireGuard HTTP/s proxy with TinyHTTP"
        repository: ${{ env.REGISTRY_ORG }}/${{ env.REGISTRY_REPO }}
